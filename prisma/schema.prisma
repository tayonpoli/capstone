// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  address   String?
  password  String
  role      Role     @default(Staff)
  status    String   @default("Active")
  createdAt DateTime @default(now())

  PasswordReset PasswordReset[]
  SalesOrder    SalesOrder[]
}

model Company {
  id        String   @id @default(uuid())
  email     String
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
}

enum Role {
  Owner
  Admin
  Staff
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([email])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role     @default(Staff)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Customer {
  id         String       @id @default(uuid())
  name       String?
  email      String
  phone      String
  address    String
  createdAt  DateTime     @default(now())
  SalesOrder SalesOrder[]
}

model Staff {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  phone          String?
  address        String?
  position       String
  type           Type            @default(FullTime)
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("staff")
}

enum Type {
  FullTime
  PartTime
}

model Inventory {
  id            String         @id @default(uuid())
  product       String
  code          String         @unique
  category      String
  description   String?
  unit          Unit           @default(Pcs)
  buyprice      Int?
  sellprice     Int?
  stock         Float          @default(0)
  limit         Float?
  lastNotified  DateTime? // Waktu terakhir notifikasi dikirim
  purchaseItems PurchaseItem[]
  SalesItem     SalesItem[]
  bomAsProduct  Production[]   @relation("ProductBOM") // BOM dimana inventory ini sebagai produk jadi
  bomAsMaterial Material[]     @relation("MaterialBOM") // BOM dimana inventory ini sebagai bahan baku
}

enum Unit {
  Pcs
  Box
  Kg
  gram
  Litre
  ml
}

model Production {
  id          String     @id @default(uuid())
  name        String
  description String?
  tag         String?
  productId   String
  product     Inventory  @relation("ProductBOM", fields: [productId], references: [id])
  total       Float      @default(0)
  materials   Material[]
  createdAt   DateTime   @default(now())
}

model Material {
  id           String     @id @default(uuid())
  productionId String
  production   Production @relation(fields: [productionId], references: [id])
  materialId   String
  material     Inventory  @relation("MaterialBOM", fields: [materialId], references: [id])
  qty          Float
  unit         Unit
  price        Float      @default(0)
}

model Supplier {
  id             String          @id @default(uuid())
  name           String?
  email          String
  phone          String
  address        String
  createdAt      DateTime        @default(now())
  contacts       Contact[]
  purchaseOrders PurchaseOrder[]
  Expenses       Expenses[]
}

model SalesOrder {
  id            String         @id @default(uuid())
  userId        String         @default("001")
  user          User           @relation(fields: [userId], references: [id])
  customerId    String
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerName  String?
  address       String?
  email         String?
  orderDate     DateTime
  tag           String?
  total         Float          @default(0)
  status        Status         @default(Completed) // Draft, Approved, Completed, Cancelled
  paymentStatus Payment        @default(Unpaid)
  memo          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         SalesItem[]
  SalesInvoice  SalesInvoice[]

  @@map("sales_orders")
}

model SalesItem {
  id           String     @id @default(uuid())
  salesOrderId String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  productId    String
  product      Inventory  @relation(fields: [productId], references: [id])
  note         String?
  quantity     Int        @default(1)
  price        Float
  total        Float      @default(0)

  @@map("sales_items")
}

model PurchaseOrder {
  id            String         @id @default(uuid())
  staffId       String
  staff         Staff          @relation(fields: [staffId], references: [id])
  supplierId    String
  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  contact       String?
  purchaseDate  DateTime
  dueDate       DateTime
  urgency       Urgency        @default(Medium) // Low, Medium, High
  total         Float          @default(0)
  status        Status         @default(Draft) // Draft, Approved, Completed, Cancelled
  paymentStatus Payment        @default(Unpaid)
  tag           String?
  memo          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         PurchaseItem[]
  Invoice       Invoice[]

  @@map("purchase_orders")
}

enum Urgency {
  Low
  Medium
  High
}

enum Status {
  Draft
  Approved
  Completed
  Cancelled
}

enum Payment {
  Unpaid
  Paid
}

model PurchaseItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Inventory     @relation(fields: [productId], references: [id])
  note            String?
  quantity        Int           @default(1)
  price           Float
  total           Float         @default(0)

  @@map("purchase_items")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String // 'stock', 'order', dll
  relatedId String? // ID terkait (productId, orderId)
  createdAt DateTime @default(now())
  userId    String? // Target user (null untuk broadcast)
}

model Invoice {
  id              String        @id @default(uuid())
  amount          Float
  paymentMethod   String?
  bankName        String?
  accountNumber   String?
  paymentDate     DateTime?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SalesInvoice {
  id            String     @id @default(uuid())
  amount        Float
  paymentMethod String?
  bankName      String?
  accountNumber String?
  paymentDate   DateTime?
  salesOrder    SalesOrder @relation(fields: [salesOrderId], references: [id])
  salesOrderId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Expenses {
  id             String           @id @default(uuid())
  supplierId     String
  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  expenseDate    DateTime
  category       String?
  total          Float            @default(0)
  paymentStatus  Payment          @default(Unpaid)
  memo           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ExpenseInvoice ExpenseInvoice[]
}

model ExpenseInvoice {
  id            String    @id @default(uuid())
  amount        Float
  paymentMethod String?
  bankName      String?
  accountNumber String?
  paymentDate   DateTime?
  Expenses      Expenses  @relation(fields: [expensesId], references: [id])
  expensesId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  department String
  email      String?
  phone      String?
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String
}
